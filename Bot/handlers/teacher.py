from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from Bot.keyboards import *
from Bot.states import *
from Bot.handlers.common import cmd_start
from DataBase.Services.auth_service import reg_teacher, logout_teacher
from DataBase.Services.student_service import add_student, get_student_code, del_student
from DataBase.Settings.models import level, kvant

teacher_router = Router()

# ==== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ò–¢–ï–õ–Ø ====
@teacher_router.callback_query(F.data == "role_teacher")
async def start_teacher_registration(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WaitCode.reg_teacher)
    await callback.message.answer(
        "üîë –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:",
        reply_markup=cancel_kb()
    )
    await callback.answer()

@teacher_router.message(WaitCode.reg_teacher)
async def finish_teacher_registration(message: Message, state: FSMContext):
    result = await reg_teacher(tg_id=message.from_user.id, code=message.text.strip())
    
    if result["status"]:
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await cmd_start(message)
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['info']}")
    
    await state.clear()

# ==== –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê ====
@teacher_router.callback_query(F.data == "add_student")
async def start_adding_student(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddStudent.name)
    await callback.message.answer(
        "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_kb()
    )
    await callback.answer()

@teacher_router.message(AddStudent.name)
async def process_student_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer(
        "üìõ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddStudent.surname)

@teacher_router.message(AddStudent.surname)
async def process_student_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await message.answer(
        "üî§ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddStudent.patronymic)

@teacher_router.message(AddStudent.patronymic)
async def process_student_patronymic(message: Message, state: FSMContext):
    await state.update_data(patronymic=message.text.strip())
    await message.answer(
        f"üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–≤–∞–Ω—Ç) —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join([l.value for l in kvant])}",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddStudent.kvant)

@teacher_router.message(AddStudent.kvant)
async def process_student_kvant(message: Message, state: FSMContext):
    await state.update_data(kvant=message.text.strip())
    await message.answer(
        f"üìä –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join([l.value for l in level])}",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddStudent.level)

@teacher_router.message(AddStudent.level)
async def process_student_level(message: Message, state: FSMContext):
    await state.update_data(level=message.text.strip())
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_kb()
    )
    await state.set_state(AddStudent.num)

@teacher_router.message(AddStudent.num)
async def process_student_num(message: Message, state: FSMContext):
    data = await state.get_data()
    
    result = await add_student(
        name=data.get('name'),
        surname=data.get('surname'),
        patronymic=data.get('patronymic'),
        level=data.get('level'),
        kvant=data.get('kvant'),
        group_num=message.text.strip()
    )
    
    student_info = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üìõ –§–∞–º–∏–ª–∏—è: {data.get('surname')}\n"
        f"üî§ –û—Ç—á–µ—Å—Ç–≤–æ: {data.get('patronymic')}\n"
        f"üè∑Ô∏è –ì—Ä—É–ø–ø–∞: {data.get('level')}-{data.get('kvant')}-{message.text.strip()}\n"
        
    )
    
    if result['status']:
        await message.answer(
            f"{student_info}"
            f"üóùÔ∏è –ö–æ–¥: {result["code"]}\n\n"
            f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
            f"üìå ID: {result.get('id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
    else:
        await message.answer(
            f"{student_info}\n\n"
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
            f"{result['info']}"
        )

    await cmd_start(message)
    await state.clear()

# ==== –£–î–ê–õ–ï–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê ====
@teacher_router.callback_query(F.data == "delete_student")
async def delete_student_by_fio(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üî¢ –ü–æ ID",
        callback_data="delete_student_by_id"))
    builder.add(InlineKeyboardButton(
        text="üë§ –ü–æ –§–ò–û",
        callback_data="delete_student_by_fio"))
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="cancel_operation"))
    builder.adjust(2, 1)
    
    await callback.message.answer(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@teacher_router.callback_query(F.data == "delete_student_by_id")
async def delete_student_by_id_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeleteStudent.id)
    await callback.message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=cancel_kb()
    )
    await callback.answer()

@teacher_router.message(DeleteStudent.id)
async def process_delete_id(message: Message, state: FSMContext):
    student_id = message.text.strip()
    
    try:
        student_id = int(student_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID - —á–∏—Å–ª–æ
        result = await del_student(tg_id=student_id)
        
        if result["status"]:
            await message.answer(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{result['info']}")
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return
    
    await cmd_start(message)
    await state.clear()


@teacher_router.callback_query(F.data == "delete_student_by_fio")
async def delete_student_by_fio(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeleteStudent.name)
    await callback.message.answer(
        "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_kb()
    )
    await callback.answer()

@teacher_router.message(DeleteStudent.name)
async def process_delete_name(message: Message, state: FSMContext):    
    await state.update_data(name=message.text.strip())
    await message.answer(
        "üìõ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_kb()
    )
    await state.set_state(DeleteStudent.surname)

@teacher_router.message(DeleteStudent.surname)
async def process_delete_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await message.answer(
        "üî§ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_kb()
    )
    await state.set_state(DeleteStudent.patronymic)

@teacher_router.message(DeleteStudent.patronymic)
async def process_delete_patronymic(message: Message, state: FSMContext):
    data = await state.get_data()
    
    student_info = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üìõ –§–∞–º–∏–ª–∏—è: {data.get('surname')}\n"
        f"üî§ –û—Ç—á–µ—Å—Ç–≤–æ: {message.text.strip()}"
    )

    result = await del_student(name=data.get('name'), surname=data.get('surname'), patronymic=message.text.strip())
    
    if result["status"]:
        await message.answer(f"{student_info}\n\n‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
    else:
        await message.answer(f"{student_info}\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{result['info']}")
    
    await cmd_start(message)

    await state.clear()

@teacher_router.callback_query(F.data == "get_code")
async def start_getting_code(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=cancel_kb())
    await state.set_state(GetCode.name)
    await callback.answer()

@teacher_router.message(GetCode.name)
async def process_student_name_for_code(message: Message, state: FSMContext):    
    await state.update_data(name=message.text.strip())
    await message.answer("üìõ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=cancel_kb())
    await state.set_state(GetCode.surname)

@teacher_router.message(GetCode.surname)
async def process_student_surname_for_code(message: Message, state: FSMContext):    
    await state.update_data(surname=message.text.strip())
    await message.answer("üî§ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=cancel_kb())
    await state.set_state(GetCode.patronymic)

@teacher_router.message(GetCode.patronymic)
async def process_student_patronymic_for_code(message: Message, state: FSMContext):
    data = await state.get_data()
    result = await get_student_code(
        name=data.get('name'),
        surname=data.get('surname'),
        patronymic=message.text.strip()
    )
    
    response = (
        f"{'‚úÖ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω' if result['status'] else '‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}"
        f"{f'\nüîë –ö–æ–¥: {result["code"]}' if result['status'] else f''}\n"
    )
    
    await message.answer(response)
    await cmd_start(message)
    await state.clear()

# ==== –í–´–•–û–î –ò–ó –ê–ö–ö–ê–£–ù–¢–ê –£–ß–ò–¢–ï–õ–Ø ====
@teacher_router.callback_query(F.data == "exit_teacher")
async def exit_teacher(callback: CallbackQuery):
    result = await logout_teacher(tg_id=callback.from_user.id)

    if result["status"]:
        await callback.message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        await cmd_start(callback.message)
    else:
        await callback.answer(f"‚ùå {result['info']}")

    await callback.answer()