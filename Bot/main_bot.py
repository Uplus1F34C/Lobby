# ======================== –í–´–ë–û–† –î–ï–†–ò–ö–¢–û–†–ò–ò ========================

import sys, os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# ======================== –ò–ú–ü–û–†–¢–´ –ë–ò–ë–õ–ò–û–¢–ï–ö ========================

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, Message, CallbackQuery, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# ======================== –ò–ú–ü–û–†–¢–´ –ü–†–û–ï–ö–¢–ê ========================

from Bot.config import settings
from DataBase import Func
from DataBase.settings.models import level, kvant

# ======================== –ù–ê–°–¢–†–ô–ö–ê –ë–û–¢–ê ========================

bot = Bot(token=settings.get_token)
dp = Dispatcher()

# ======================== –ö–õ–ê–°–°–´ –°–û–°–¢–û–Ø–ù–ò–ô FSM ========================

class WaitCode(StatesGroup):
    reg_teacher = State()
    reg_student = State()
    del_student = State()

class AddStudent(StatesGroup):
    name = State()
    surname = State()
    patronymic = State()
    kvant = State()
    level = State()
    num = State()

class GetCode(StatesGroup):
    name = State()
    surname = State()
    patronymic = State()

class DeleteStudent(StatesGroup):
    id = State()
    name = State()
    surname = State()
    patronymic = State()

# ======================== –ö–û–ú–ê–ù–î–´ ========================

@dp.message(Command("start"))
async def cmd_start(message: Message):
    builder = InlineKeyboardBuilder()

     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∏—Ç–µ–ª—è
    teacher_info = await Func.log_teacher(message.from_user.id)
    student_info = await Func.log_student(message.from_user.id)
    if teacher_info["status"]:
        builder.add(InlineKeyboardButton(
            text="üë®‚Äçüéì –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞",
            callback_data="add_student__cd"))
        builder.add(InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞",
            callback_data="delete_student__cd"))
        builder.add(InlineKeyboardButton(
            text="üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —É—á–µ–Ω–∏–∫–∞",
            callback_data="get_code__cd"))
        builder.add(InlineKeyboardButton(
            text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
            callback_data="exit_teacher__cd"))
        builder.adjust(1, 1, 1, 1)

        welcome_message = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {teacher_info['name']} {teacher_info['patronymic']}!\n\n"
            "üìö –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞ 'Lobby'\n\n"
            "üåê –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Lobby - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–æ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞\n\n"
            "üîπ –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
    elif student_info["status"]:
        builder.add(InlineKeyboardButton(
            text="üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å",
            callback_data="post_que__cd"))
        builder.add(InlineKeyboardButton(
            text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
            callback_data="post_idea__cd"))
        builder.add(InlineKeyboardButton(
            text="üìÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            callback_data="schedule__cd"))
        builder.add(InlineKeyboardButton(
            text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
            callback_data="exit_student__cd"))
        builder.adjust(1, 1, 1, 1)

        welcome_message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {student_info['name']}!\n\n"
            "üåê –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Lobby - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–æ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞\n"
            "üîπ –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            )
    
    # –ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else:
        builder.add(InlineKeyboardButton(
            text="üë®‚Äçüè´ –Ø —É—á–∏—Ç–µ–ª—å",
            callback_data="role_teacher__cd"))
        builder.add(InlineKeyboardButton(
            text="üë®‚Äçüéì –Ø —É—á–µ–Ω–∏–∫",
            callback_data="role_student__cd"))
        builder.adjust(2)

        welcome_message = (
            "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ª—é–±–æ–≥–æ –∫–≤–∞–Ω—Ç–æ—Ä–∏–∞–Ω—Ü–∞\n\n"
            "üîπ –û–Ω –º–æ–∂–µ—Ç:\n"
            """‚Ä¢ üåê –û—Ç–∫—Ä—ã—Ç—å "Lobby" - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —É—á–µ–Ω–∏–∫–∞\n"""
            "‚Ä¢ üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã\n"
            "‚Ä¢ üì∞ –î–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, —Ä–∞–±–æ—Ç–µ –∫–≤–∞–Ω—Ç–æ—Ä–∏—É–º–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)\n"
            "‚Ä¢ üìÖ –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π\n\n"
            """‚Ä¢ üí° –ê —Ç–∞–∫ –∂–µ –ø—Ä–∏–Ω—è—Ç—å –∏–¥–µ–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞ "Lobby" –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É\n\n"""
            "üü¢ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:"
        )

    try:
        await message.message.answer(welcome_message, reply_markup=builder.as_markup())
    except:
        await message.answer(welcome_message, reply_markup=builder.as_markup())



@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    builder = InlineKeyboardBuilder()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—á–∏—Ç–µ–ª—è
    teacher_auth = await Func.log_teacher(message.from_user.id)
    student_auth = await Func.log_student(message.from_user.id)
    if teacher_auth["status"]:
        builder.add(InlineKeyboardButton(
            text="üë®‚Äçüéì –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞",
            callback_data="add_student__cd"))
        builder.add(InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞",
            callback_data="delete_student__cd"))
        builder.add(InlineKeyboardButton(
            text="üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —É—á–µ–Ω–∏–∫–∞",
            callback_data="get_code__cd"))
        builder.add(InlineKeyboardButton(
            text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
            callback_data="exit_teacher__cd"))
        builder.adjust(1, 1, 1, 1)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
    elif student_auth["status"]:
        builder.add(InlineKeyboardButton(
            text="üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å",
            callback_data="post_que__cd"))
        builder.add(InlineKeyboardButton(
            text="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
            callback_data="post_idea__cd"))
        builder.add(InlineKeyboardButton(
            text="üìÖ –£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            callback_data="schedule__cd"))
        builder.add(InlineKeyboardButton(
            text="üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞",
            callback_data="exit_student__cd"))
        builder.adjust(1, 1, 1, 1)
    # –ú–µ–Ω—é –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    else:
        await cmd_start(message)
        return
    
    welcome_message = (
        "üåê –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å Lobby - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–æ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞\n"
        "üîπ –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:")
    try:
        await message.message.answer(welcome_message, reply_markup=builder.as_markup())
    except:
        await message.answer(welcome_message, reply_markup=builder.as_markup())

# ======================== –§–£–ù–ö–¶–ò–ò –£–ß–ò–¢–ï–õ–ï–ô ========================

# ==== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ò–¢–ï–õ–Ø ====
@dp.callback_query(F.data == "role_teacher__cd")
async def reg_teacher(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WaitCode.reg_teacher)
    await callback.message.answer(
        "üîë –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:\n\n"
        "‚ùó –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ–¥–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã"
    )
    await callback.answer()

@dp.message(WaitCode.reg_teacher)
async def reg_teacher_2(message: Message, state: FSMContext):
    registration_code = message.text.strip()
    result = await Func.reg_teacher(message.from_user.id, registration_code)

    if result["status"]:
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"{message.from_user.username} - –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ —É—á–∏—Ç–µ–ª—å")
        await cmd_start(message)
    else:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result['info']}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

    await state.clear()

# ==== –û–¢–ú–ï–ù–ê –û–ü–ï–†–ê–¶–ò–ò ====
@dp.callback_query(F.data == "cancel_operation__cd")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await cmd_menu(callback)
    await callback.answer()

cancel_button = InlineKeyboardBuilder()
cancel_button.add(InlineKeyboardButton(
    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ",
    callback_data="cancel_operation__cd"))

# ==== –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê ====
@dp.callback_query(F.data == "add_student__cd")
async def start_adding_student(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddStudent.name)
    await callback.message.answer(
        "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_button.as_markup()
    )
    await callback.answer()

@dp.message(AddStudent.name)
async def process_student_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer(
        "üìõ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(AddStudent.surname)

@dp.message(AddStudent.surname)
async def process_student_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await message.answer(
        "üî§ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(AddStudent.patronymic)

@dp.message(AddStudent.patronymic)
async def process_student_patronymic(message: Message, state: FSMContext):
    await state.update_data(patronymic=message.text.strip())
    await message.answer(
        f"üìö –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–∫–≤–∞–Ω—Ç) —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join([l.value for l in kvant])}",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(AddStudent.kvant)

@dp.message(AddStudent.kvant)
async def process_student_kvant(message: Message, state: FSMContext):
    await state.update_data(kvant=message.text.strip())
    await message.answer(
        f"üìä –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞:\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join([l.value for l in level])}",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(AddStudent.level)

@dp.message(AddStudent.level)
async def process_student_level(message: Message, state: FSMContext):
    await state.update_data(level=message.text.strip())
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(AddStudent.num)

@dp.message(AddStudent.num)
async def process_student_num(message: Message, state: FSMContext):
    data = await state.get_data()
    
    result = await Func.insert_student(
        name=data.get('name'),
        surname=data.get('surname'),
        patronymic=data.get('patronymic'),
        level=data.get('level'),
        kvant=data.get('kvant'),
        group_num=message.text.strip()
    )
    
    student_info = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üìõ –§–∞–º–∏–ª–∏—è: {data.get('surname')}\n"
        f"üî§ –û—Ç—á–µ—Å—Ç–≤–æ: {data.get('patronymic')}\n"
        f"üè∑Ô∏è –ì—Ä—É–ø–ø–∞: {data.get('level')}-{data.get('kvant')}-{message.text.strip()}\n"
        
    )
    
    if result['status']:
        await message.answer(
            f"{student_info}"
            f"üóùÔ∏è –ö–æ–¥: {result["code"]}\n\n"
            f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n"
            f"üìå ID: {result.get('id', '–Ω–µ —É–∫–∞–∑–∞–Ω')}"
        )
    else:
        await message.answer(
            f"{student_info}\n\n"
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
            f"{result['info']}"
        )

    await cmd_menu(message)
    await state.clear()

# ==== –£–î–ê–õ–ï–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê ====
@dp.callback_query(F.data == "delete_student__cd")
async def delete_student_by_fio(callback: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üî¢ –ü–æ ID",
        callback_data="delete_student_by_id__cd"))
    builder.add(InlineKeyboardButton(
        text="üë§ –ü–æ –§–ò–û",
        callback_data="delete_student_by_fio__cd"))
    builder.add(InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="cancel_operation__cd"))
    builder.adjust(2, 1)
    
    await callback.message.answer(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@dp.callback_query(F.data == "delete_student_by_id__cd")
async def delete_student_by_id_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeleteStudent.id)
    await callback.message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=cancel_button.as_markup()
    )
    await callback.answer()

@dp.message(DeleteStudent.id)
async def process_delete_id(message: Message, state: FSMContext):
    student_id = message.text.strip()
    
    try:
        student_id = int(student_id)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID - —á–∏—Å–ª–æ
        result = await Func.delete_student(student_id=student_id)
        
        if result["status"]:
            await message.answer(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å ID {student_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{result['info']}")
    except ValueError:
        await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return
    
    await cmd_menu(message)
    await state.clear()


@dp.callback_query(F.data == "delete_student_by_fio__cd")
async def delete_student_by_fio(callback: CallbackQuery, state: FSMContext):
    await state.set_state(DeleteStudent.name)
    await callback.message.answer(
        "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_button.as_markup()
    )
    await callback.answer()

@dp.message(DeleteStudent.name)
async def process_delete_name(message: Message, state: FSMContext):    
    await state.update_data(name=message.text.strip())
    await message.answer(
        "üìõ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(DeleteStudent.surname)

@dp.message(DeleteStudent.surname)
async def process_delete_surname(message: Message, state: FSMContext):
    await state.update_data(surname=message.text.strip())
    await message.answer(
        "üî§ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:",
        reply_markup=cancel_button.as_markup()
    )
    await state.set_state(DeleteStudent.patronymic)

@dp.message(DeleteStudent.patronymic)
async def process_delete_patronymic(message: Message, state: FSMContext):
    data = await state.get_data()
    
    student_info = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–µ:\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üìõ –§–∞–º–∏–ª–∏—è: {data.get('surname')}\n"
        f"üî§ –û—Ç—á–µ—Å—Ç–≤–æ: {message.text.strip()}"
    )

    result = await Func.delete_student(name=data.get('name'), surname=data.get('surname'), patronymic=message.text.strip())
    
    if result["status"]:
        await message.answer(f"{student_info}\n\n‚úÖ –°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
    else:
        await message.answer(f"{student_info}\n\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞:\n{result['info']}")
    
    await cmd_menu(message)

    await state.clear()

# ==== –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–î–ê –°–¢–£–î–ï–ù–¢–ê ====
@dp.callback_query(F.data == "get_code__cd")
async def start_getting_code(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –¥–æ—Å—Ç—É–ø–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n"
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=cancel_button.as_markup())
    await state.set_state(GetCode.name)
    await callback.answer()

@dp.message(GetCode.name)
async def process_student_name_for_code(message: Message, state: FSMContext):    
    await state.update_data(name=message.text.strip())
    await message.answer("üìõ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=cancel_button.as_markup())
    await state.set_state(GetCode.surname)

@dp.message(GetCode.surname)
async def process_student_surname_for_code(message: Message, state: FSMContext):    
    await state.update_data(surname=message.text.strip())
    await message.answer("üî§ –í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–∞:", reply_markup=cancel_button.as_markup())
    await state.set_state(GetCode.patronymic)

@dp.message(GetCode.patronymic)
async def process_student_patronymic_for_code(message: Message, state: FSMContext):
    data = await state.get_data()
    result = await Func.get_student_code(
        name=data.get('name'),
        surname=data.get('surname'),
        patronymic=message.text.strip()
    )
    
    response = (
        f"{'‚úÖ –°—Ç—É–¥–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω' if result['status'] else '‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}"
        f"{f'\nüîë –ö–æ–¥: {result["code"]}' if result['status'] else f''}\n"
    )
    
    await message.answer(response)

    await cmd_menu(message)
    
    await state.clear()

# ==== –í–´–•–û–î –ò–ó –ê–ö–ö–ê–£–ù–¢–ê –£–ß–ò–¢–ï–õ–Ø ====
@dp.callback_query(F.data == "exit_teacher__cd")
async def exit_teacher(callback: CallbackQuery):
    result = await Func.del_teachers_id(teacher_tg_id=callback.from_user.id)

    if result["status"]:
        await callback.message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        await cmd_start(callback.message)
    else:
        await callback.answer(f"‚ùå {result['info']}")

    await callback.answer()

# ======================== –§–£–ù–ö–¶–ò–ò –°–¢–£–î–ï–ù–¢–û–í ========================

# ==== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–¢–£–î–ï–ù–¢–ê ====
@dp.callback_query(F.data == "role_student__cd")
async def reg_student(callback: CallbackQuery, state: FSMContext):
    await state.set_state(WaitCode.reg_student)
    await callback.message.answer(
        "üîë –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Ç–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:\n\n"
        "‚ùó –ï—Å–ª–∏ —É —Ç–µ–±—è –µ–≥–æ –Ω–µ—Ç - –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å–≤–æ–µ–º—É —É—á–∏—Ç–µ–ª—é"
    )
    await callback.answer()

@dp.message(WaitCode.reg_student)
async def reg_student_2(message: Message, state: FSMContext):
    result = await Func.reg_student(
        student_tg_id=message.from_user.id,
        code=message.text.strip()
    )

    if result["status"]:
        print(f"{message.from_user.username} - –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –∫–∞–∫ —É—á–µ–Ω–∏–∫")
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞!")
        await cmd_start(message)
    else:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {result['info']}")

    await state.clear()

# ==== –û–¢–ü–†–ê–í–ö–ê –û–ü–†–û–°–ê ====
@dp.callback_query(F.data == "post_que__cd")
async def post_que(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""
    await callback.answer("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# ==== –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ò–î–ï–ô ====
@dp.callback_query(F.data == "post_idea__cd")
async def post_idea(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–¥–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"""
    await callback.answer("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    
# ==== –ü–†–û–°–ú–û–¢–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø ====
@dp.callback_query(F.data == "schedule__cd")
async def post_idea(callback: CallbackQuery):
    await callback.answer("‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

# ==== –í–´–•–û–î –ò–ó –ê–ö–ö–ê–£–ù–¢–ê –°–¢–£–î–ï–ù–¢–ê ====
@dp.callback_query(F.data == "exit_student__cd")
async def exit_student(callback: CallbackQuery):
    """–í—ã—Ö–æ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    result = await Func.del_students_id(student_tg_id=callback.from_user.id)

    if result["status"]:
        await callback.message.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        await cmd_start(callback.message)
    else:
        await callback.answer(f"‚ùå {result['info']}")

    await callback.answer()

# ======================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ========================

@dp.message()
async def handle_other_messages(message: Message):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
    await message.delete()

# ======================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ========================

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())